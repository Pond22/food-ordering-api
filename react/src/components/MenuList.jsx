import React, { useState, useEffect, useRef } from "react";
import MenuItem from "./MenuItem";
import styles from "../styles/MenuList.module.css";
import { ShoppingCart } from "lucide-react";

const MenuList = () => {
  const [menuItems, setMenuItems] = useState([]); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
  const [categories, setCategories] = useState([]); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const [selectedCategory, setSelectedCategory] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [activeLink, setActiveLink] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
  const navRef = useRef(); // ‡πÉ‡∏ä‡πâ ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö nav (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  const categoryRefs = useRef({}); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö refs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô

  const [cart, setCart] = useState([]);
  const [isCartVisible, setIsCartVisible] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          "http://localhost:8080/api/menu/ActiveMenu"
        );
        const data = await response.json();
        setMenuItems(data);

        // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        const uniqueCategories = [
          ...new Set(data.map((item) => item.Category.Name)),
        ];
        setCategories(uniqueCategories);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π
  const handleCategoryClick = (category) => {
    setSelectedCategory(category);
    setActiveLink(category); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô active link

    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    categoryRefs.current[category]?.scrollIntoView({ behavior: "smooth" });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredMenuItems = menuItems.filter(
    (item) => item.Category.Name === selectedCategory
  );

  const getCartItemCount = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const handleCartToggle = () => {
    setIsCartVisible(!isCartVisible);
  };

  const handleAddToCart = (item) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((cartItem) => cartItem.id === item.id);
      if (existingItem) {
        return prevCart.map((cartItem) =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + 1 }
            : cartItem
        );
      }
      return [...prevCart, { ...item, quantity: 1 }];
    });
  };

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  return (
    <div>
      <header className={styles.header}>
        <div className="flex justify-between ">
          <div className="flex justify-center items-center ">
            <h1>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà{}</h1>
          </div>
          <div className={styles.cartIcon}>
            <button className={styles.cartButton} onClick={handleCartToggle}>
              {/* üõí  */}
              <ShoppingCart />
              {getCartItemCount() > 0 && (
                <span className={styles.cartBadge}>{getCartItemCount()}</span>
              )}
            </button>
            {isCartVisible && (
              <div className={styles.cartDetails}>
                <ul>
                  {cart.map((item) => (
                    <li key={item.id}>
                      {item.name} x {item.quantity} -{" "}
                      {item.price * item.quantity} ‡∏ø
                    </li>
                  ))}
                </ul>
                <button onClick={() => alert("Checkout")}>Checkout</button>
              </div>
            )}
          </div>
        </div>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô <nav> */}
        <nav className={styles.nav}>
          {categories.map((category, index) => (
            <a
              key={index}
              href={`#${category}`} // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô href
              className={activeLink === category ? styles.active : ""}
              onClick={() => handleCategoryClick(category)} // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
            >
              {category} {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
            </a>
          ))}
        </nav>
      </header>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô */}
      {/* <div id="" className={styles.promotionSection}>
        <h2>Promotion</h2>
        
        <div className={styles.promotionBanner}>
          <button className={styles.arrow} onClick={() => handleArrowClick('left')}>&lt;</button>
          {promotionItems.map((item, index) => (
            <div
              key={item.id}
              className={
                index === currentIndex
                  ? `${styles.promotionItem} ${styles.active}` 
                  : styles.promotionItem
              }
            >
              <img
                src={item.image}
                alt={item.name}
                className={styles.promotionImage}
              />
              <h4>{item.name}</h4>
              <p>{item.description}</p>
              <span>{item.price} ‡∏ø</span>
            </div>
          ))}
          <button className={styles.arrow} onClick={() => handleArrowClick('right')}>&gt;</button>
        </div>
        <div className={styles.navigator}>
          {promotionItems.map((_, index) => (
            <span
              key={index}
              className={ 
                index === currentIndex 
                  ? `${styles.navigatorDot} ${styles.active}` 
                  : styles.navigatorDot
              }
              onClick={() => handleNavigatorClick(index)}
            ></span>
          ))}
        </div>
      </div> */}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö flatlist ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
      <div className={styles.menuList}>
        {categories.map((category, index) => {
          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
          const filteredMenuItems = menuItems.filter(
            (item) => item.Category.Name === category
          );

          return (
            <div
              key={index}
              ref={(el) => (categoryRefs.current[category] = el)} // ‡∏ï‡∏±‡πâ‡∏á ref ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
              id={category}
              className={styles.categorySection}
            >
              <h2>{category}</h2> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
              <div className={styles.menuGrid}>
                {filteredMenuItems.map((item) => (
                  <MenuItem
                    key={item.ID}
                    item={item}
                    addToCart={() => handleAddToCart(item)}
                  />
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default MenuList;
